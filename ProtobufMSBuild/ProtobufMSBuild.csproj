<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
		<!-- we need the assemblies bundled, so set this so we don't expose any dependencies to the outside world -->
		<GenerateDependencyFile>true</GenerateDependencyFile>
		<TargetsForTfmSpecificBuildOutput>$(TargetsForTfmSpecificBuildOutput);CopyProjectReferencesToPackage</TargetsForTfmSpecificBuildOutput>
		<!-- This property tells MSBuild where the root folder of the package's build assets should be. Because we are not a library package, we should not pack to 'lib'. Instead, we choose 'tasks' by convention. -->
		<BuildOutputTargetFolder>tasks</BuildOutputTargetFolder>
		<!-- NuGet does validation that libraries in a package are exposed as dependencies, but we _explicitly_ do not want that behavior for MSBuild tasks. They are isolated by design. Therefore we ignore this specific warning. -->
		<NoWarn>NU5100</NoWarn>
		<SuppressDependenciesWhenPacking>true</SuppressDependenciesWhenPacking>
		<DebugType>embedded</DebugType>
		<IsPackable>true</IsPackable>
		<CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>
		<Title>Protobuf MSBuild</Title>
		<Copyright>ProjectHSI 2025</Copyright>
		<RepositoryType>git</RepositoryType>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <WarningLevel>9999</WarningLevel>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
    <WarningLevel>9999</WarningLevel>
  </PropertyGroup>

	<ItemGroup>
		<PackageReference Include="Microsoft.Build.Utilities.Core" Version="17.0.0" PrivateAssets="all" ExcludeAssets="Runtime" />
		<PackageReference Include="Microsoft.Extensions.DependencyInjection" Version="6.0.0" PrivateAssets="all" />
	</ItemGroup>

	<ItemGroup>
		<Content Include="build\ProtobufMSBuild.props" PackagePath="build\" />
		<Content Include="build\ProtobufMSBuild.targets" PackagePath="build\" />
	</ItemGroup>
	
	<Target Name="CopyProjectReferencesToPackage" DependsOnTargets="ResolveReferences">
        <ItemGroup>
            <!-- The dependencies of your MSBuild task must be packaged inside the package, they cannot be expressed as normal PackageReferences -->
            <BuildOutputInPackage Include="@(ReferenceCopyLocalPaths)" TargetPath="%(ReferenceCopyLocalPaths.DestinationSubPath)" />
        </ItemGroup>
    </Target>
	<Target Name="CopyProjectReferencesToPackage" DependsOnTargets="ResolveReferences">
		<ItemGroup>
			<!-- The dependencies of your MSBuild task must be packaged inside the package, they cannot be expressed as normal PackageReferences -->
			<BuildOutputInPackage Include="@(ReferenceCopyLocalPaths)" TargetPath="%(ReferenceCopyLocalPaths.DestinationSubPath)" />
		</ItemGroup>
	</Target>
	
	
	<!-- This target adds the generated deps.json file to our package output -->
    <Target Name="AddBuildDependencyFileToBuiltProjectOutputGroupOutput" BeforeTargets="BuiltProjectOutputGroup" Condition=" '$(GenerateDependencyFile)' == 'true'">
       <ItemGroup>
          <BuiltProjectOutputGroupOutput Include="$(ProjectDepsFilePath)" TargetPath="$(ProjectDepsFileName)" FinalOutputPath="$(ProjectDepsFilePath)" />
       </ItemGroup>
    </Target>

</Project>
